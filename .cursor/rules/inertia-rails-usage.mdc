---
description: 
globs: 
alwaysApply: true
---
# Regra: Uso do Inertia.js para Interação com Backend Rails

## Objetivo
Padronizar e documentar como o frontend Vue deve interagir com o backend Rails utilizando Inertia.js, garantindo integração fluida, sem uso de views tradicionais do Rails e aproveitando os recursos de props, navegação e tratamento de erros do Inertia.

## Diretrizes Gerais
- **Nunca** utilize formulários HTML tradicionais com recarregamento de página.
- Utilize sempre o helper `useForm` do `@inertiajs/vue3` para criar e submeter formulários.
- Submissões devem ser feitas via métodos do Inertia (`form.post`, `form.put`, `form.patch`, `form.delete`), nunca via fetch/axios manual, exceto em casos muito específicos.
- O backend Rails deve responder sempre via `render inertia: ...`, retornando props e status adequados.
- Erros de validação devem ser retornados como props e tratados automaticamente pelo Inertia no frontend.
- O redirecionamento após sucesso deve ser feito pelo backend (redirect), e o Inertia cuida da navegação sem recarregar a página.

## Exemplo de Formulário Vue (Login)
```vue
<script setup>
import { useForm } from '@inertiajs/vue3'
const form = useForm({ email: '', password: '' })
function submit() {
  form.post('/users/sign_in')
}
</script>
<template>
  <form @submit.prevent="submit">
    <input v-model="form.email" type="email" />
    <input v-model="form.password" type="password" />
    <button type="submit">Login</button>
    <div v-if="form.errors.email">{{ form.errors.email }}</div>
    <div v-if="form.errors.password">{{ form.errors.password }}</div>
    <div v-if="form.errors.error">{{ form.errors.error }}</div>
  </form>
</template>
```

## Exemplo de Controller Rails
```ruby
class Users::SessionsController < ApplicationController
  def create
    user = User.find_by(email: params[:email])
    if user&.valid_password?(params[:password])
      sign_in(user)
      redirect_to root_path, notice: 'Login successful.'
    else
      render inertia: 'Users/Sessions/New', props: {
        error: 'Invalid email or password',
        email: params[:email]
      }, status: :unprocessable_entity
    end
  end
end
```

## Boas Práticas
- Sempre utilize os métodos do Inertia para navegação e submissão de dados.
- Trate erros e mensagens de sucesso via props, nunca via flash ou redirect padrão do Rails.
- Mantenha o frontend desacoplado de views Rails, usando apenas páginas e componentes Vue.
- Consulte a documentação oficial do [Inertia Rails](mdc:https:/inertia-rails.dev/guide/forms) e [Inertia.js](mdc:https:/inertiajs.com/forms#using-the-useform-hook) para detalhes e exemplos avançados.

---
**Referências:**
- [inertia-rails.dev/guide/forms](mdc:https:/inertia-rails.dev/guide/forms)
- [inertiajs.com/forms#using-the-useform-hook](mdc:https:/inertiajs.com/forms#using-the-useform-hook)
